--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone III" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTH_R=16 LPM_WIDTHU=10 LPM_WIDTHU_R=10 MAXIMIZE_SPEED=5 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="M4K" RDSYNC_DELAYPIPE=3 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=3 aclr data q rdclk rdempty rdreq wrclk wrfull wrreq wrusedw CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone II" LOW_POWER_MODE="AUTO" lpm_hint="MAXIMIZE_SPEED=5" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 8.1 cbx_a_gray2bin 2008:05:19:09:32:04:SJ cbx_a_graycounter 2008:05:19:09:39:53:SJ cbx_altdpram 2008:05:19:10:27:12:SJ cbx_altsyncram 2008:08:26:11:57:11:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_dcfifo 2008:09:07:22:36:06:SJ cbx_fifo_common 2008:05:19:10:54:06:SJ cbx_flex10ke 2008:05:19:10:53:03:SJ cbx_lpm_add_sub 2008:05:19:10:49:01:SJ cbx_lpm_compare 2008:09:01:07:44:05:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2008:05:19:10:30:36:SJ cbx_mgl 2008:08:08:15:16:18:SJ cbx_scfifo 2008:05:19:10:25:30:SJ cbx_stratix 2008:08:05:17:10:23:SJ cbx_stratixii 2008:08:07:13:54:47:SJ cbx_stratixiii 2008:07:11:13:32:02:SJ cbx_util_mgl 2008:07:18:09:58:54:SJ  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_gray2bin_ugb (gray[10..0])
RETURNS ( bin[10..0]);
FUNCTION a_graycounter_t57 (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION a_graycounter_pjc (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION a_graycounter_ojc (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION altsyncram_tg51 (aclr1, address_a[9..0], address_b[9..0], addressstall_b, clock0, clock1, clocken1, data_a[15..0], wren_a)
RETURNS ( q_b[15..0]);
FUNCTION alt_synch_pipe_e98 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION dffpipe_pe9 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION alt_synch_pipe_vd8 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION cmpr_356 (dataa[5..0], datab[5..0])
RETURNS ( aeb);
FUNCTION cmpr_256 (dataa[4..0], datab[4..0])
RETURNS ( aeb);
FUNCTION mux_a18 (data[1..0], sel[0..0])
RETURNS ( result[0..0]);

--synthesis_resources = lut 52 M9K 2 reg 106 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=s102;{-to rdemp_eq_comp_lsb_aeb} POWER_UP_LEVEL=HIGH;{-to rdemp_eq_comp_msb_aeb} POWER_UP_LEVEL=HIGH;-name CUT ON -from rdptr_g -to ws_dgrp|dffpipe6|dffe7a;-name SDC_STATEMENT ""set_false_path -from *rdptr_g* -to *ws_dgrp|dffpipe_qe9:dffpipe6|dffe7a* """;

SUBDESIGN dcfifo_e0p1
( 
	aclr	:	input;
	data[15..0]	:	input;
	q[15..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdreq	:	input;
	wrclk	:	input;
	wrfull	:	output;
	wrreq	:	input;
	wrusedw[9..0]	:	output;
) 
VARIABLE 
	wrptr_g_gray2bin : a_gray2bin_ugb;
	ws_dgrp_gray2bin : a_gray2bin_ugb;
	rdptr_g1p : a_graycounter_t57;
	wrptr_g1p : a_graycounter_pjc;
	wrptr_gp : a_graycounter_ojc;
	fifo_ram : altsyncram_tg51;
	delayed_wrptr_g[10..0] : dffe;
	rdemp_eq_comp_lsb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdemp_eq_comp_msb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdptr_g[10..0] : dffe;
	wrfull_eq_comp_lsb_mux_reg : dffe;
	wrfull_eq_comp_msb_mux_reg : dffe;
	rs_dgwp : alt_synch_pipe_e98;
	ws_brp : dffpipe_pe9;
	ws_bwp : dffpipe_pe9;
	ws_dgrp : alt_synch_pipe_vd8;
	wrusedw_sub_dataa[10..0]	:	WIRE;
	wrusedw_sub_datab[10..0]	:	WIRE;
	wrusedw_sub_result[10..0]	:	WIRE;
	rdempty_eq_comp1_lsb : cmpr_356;
	rdempty_eq_comp1_msb : cmpr_256;
	rdempty_eq_comp_lsb : cmpr_356;
	rdempty_eq_comp_msb : cmpr_256;
	wrfull_eq_comp1_lsb : cmpr_356;
	wrfull_eq_comp1_msb : cmpr_256;
	wrfull_eq_comp_lsb : cmpr_356;
	wrfull_eq_comp_msb : cmpr_256;
	rdemp_eq_comp_lsb_mux : mux_a18;
	rdemp_eq_comp_msb_mux : mux_a18;
	wrfull_eq_comp_lsb_mux : mux_a18;
	wrfull_eq_comp_msb_mux : mux_a18;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[9..0]	: WIRE;
	ram_address_b[9..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_g1s[10..0]	: WIRE;
	wrptr_gs[10..0]	: WIRE;

BEGIN 
	wrptr_g_gray2bin.gray[10..0] = wrptr_gp.q[10..0];
	ws_dgrp_gray2bin.gray[10..0] = ws_dgrp.q[10..0];
	rdptr_g1p.aclr = aclr;
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = valid_rdreq;
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	wrptr_gp.aclr = aclr;
	wrptr_gp.clock = wrclk;
	wrptr_gp.cnt_en = valid_wrreq;
	fifo_ram.aclr1 = aclr;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! valid_rdreq);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_gp.q[];
	rdemp_eq_comp_lsb_aeb.clk = rdclk;
	rdemp_eq_comp_lsb_aeb.d = rdemp_eq_comp_lsb_mux.result[];
	rdemp_eq_comp_lsb_aeb.prn = (! aclr);
	rdemp_eq_comp_msb_aeb.clk = rdclk;
	rdemp_eq_comp_msb_aeb.d = rdemp_eq_comp_msb_mux.result[];
	rdemp_eq_comp_msb_aeb.prn = (! aclr);
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrfull_eq_comp_lsb_mux_reg.clk = wrclk;
	wrfull_eq_comp_lsb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_lsb_mux_reg.d = wrfull_eq_comp_lsb_mux.result[];
	wrfull_eq_comp_msb_mux_reg.clk = wrclk;
	wrfull_eq_comp_msb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_msb_mux_reg.d = wrfull_eq_comp_msb_mux.result[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_brp.clock = wrclk;
	ws_brp.clrn = (! aclr);
	ws_brp.d[] = ws_dgrp_gray2bin.bin[];
	ws_bwp.clock = wrclk;
	ws_bwp.clrn = (! aclr);
	ws_bwp.d[] = wrptr_g_gray2bin.bin[];
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	wrusedw_sub_result[] = wrusedw_sub_dataa[] - wrusedw_sub_datab[];
	wrusedw_sub_dataa[] = ws_bwp.q[];
	wrusedw_sub_datab[] = ws_brp.q[];
	rdempty_eq_comp1_lsb.dataa[5..0] = delayed_wrptr_g[5..0].q;
	rdempty_eq_comp1_lsb.datab[5..0] = rdptr_g1p.q[5..0];
	rdempty_eq_comp1_msb.dataa[4..0] = delayed_wrptr_g[10..6].q;
	rdempty_eq_comp1_msb.datab[4..0] = rdptr_g1p.q[10..6];
	rdempty_eq_comp_lsb.dataa[5..0] = delayed_wrptr_g[5..0].q;
	rdempty_eq_comp_lsb.datab[5..0] = rdptr_g[5..0].q;
	rdempty_eq_comp_msb.dataa[4..0] = delayed_wrptr_g[10..6].q;
	rdempty_eq_comp_msb.datab[4..0] = rdptr_g[10..6].q;
	wrfull_eq_comp1_lsb.dataa[5..0] = rdptr_g[5..0].q;
	wrfull_eq_comp1_lsb.datab[5..0] = wrptr_g1s[5..0];
	wrfull_eq_comp1_msb.dataa[4..0] = rdptr_g[10..6].q;
	wrfull_eq_comp1_msb.datab[4..0] = wrptr_g1s[10..6];
	wrfull_eq_comp_lsb.dataa[5..0] = rdptr_g[5..0].q;
	wrfull_eq_comp_lsb.datab[5..0] = wrptr_gs[5..0];
	wrfull_eq_comp_msb.dataa[4..0] = rdptr_g[10..6].q;
	wrfull_eq_comp_msb.datab[4..0] = wrptr_gs[10..6];
	rdemp_eq_comp_lsb_mux.data[] = ( rdempty_eq_comp1_lsb.aeb, rdempty_eq_comp_lsb.aeb);
	rdemp_eq_comp_lsb_mux.sel[] = valid_rdreq;
	rdemp_eq_comp_msb_mux.data[] = ( rdempty_eq_comp1_msb.aeb, rdempty_eq_comp_msb.aeb);
	rdemp_eq_comp_msb_mux.sel[] = valid_rdreq;
	wrfull_eq_comp_lsb_mux.data[] = ( wrfull_eq_comp1_lsb.aeb, wrfull_eq_comp_lsb.aeb);
	wrfull_eq_comp_lsb_mux.sel[] = valid_wrreq;
	wrfull_eq_comp_msb_mux.data[] = ( wrfull_eq_comp1_msb.aeb, wrfull_eq_comp_msb.aeb);
	wrfull_eq_comp_msb_mux.sel[] = valid_wrreq;
	int_rdempty = (rdemp_eq_comp_lsb_aeb.q & rdemp_eq_comp_msb_aeb.q);
	int_wrfull = (wrfull_eq_comp_lsb_mux_reg.q & wrfull_eq_comp_msb_mux_reg.q);
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_gp.q[10..10] $ wrptr_gp.q[9..9]), wrptr_gp.q[8..0]);
	ram_address_b[] = ( (rdptr_g1p.q[10..10] $ rdptr_g1p.q[9..9]), rdptr_g1p.q[8..0]);
	rdempty = int_rdempty;
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrfull = int_wrfull;
	wrptr_g1s[] = ( (! wrptr_g1p.q[10..10]), (! wrptr_g1p.q[9..9]), wrptr_g1p.q[8..0]);
	wrptr_gs[] = ( (! wrptr_gp.q[10..10]), (! wrptr_gp.q[9..9]), wrptr_gp.q[8..0]);
	wrusedw[] = ( wrusedw_sub_result[9..0]);
	ASSERT (0) 
	REPORT "Device family Cyclone III does not have M4K blocks -- using available memory blocks"
	SEVERITY WARNING;
END;
--VALID FILE
